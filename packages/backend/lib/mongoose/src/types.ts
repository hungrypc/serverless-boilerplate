import mongoose from 'mongoose'

import { BaseDictionary } from '@app/common'

type AutoGeneratedFields = 'id' | 'createdAt' | 'updatedAt'
type AutoGeneratedFieldsForDeepOmit = { [k in AutoGeneratedFields]: never }

type Constructor<T> =
  | (T extends string
      ? StringConstructor
      : T extends number
      ? NumberConstructor
      : T extends boolean
      ? BooleanConstructor
      : T extends Date
      ? DateConstructor
      : T extends object
      ? T
      : never)
  | 'Mixed'

type InferTypeImpl<T> = T extends StringConstructor
  ? string
  : T extends NumberConstructor
  ? number
  : T extends BooleanConstructor
  ? boolean
  : T extends DateConstructor
  ? Date
  : T extends mongoose.Schema<infer SchemaT>
  ? SchemaT /** @todo more inference */
  : unknown

type InferType<OptionsT extends mongoose.SchemaTypeOptions<any>> =
  | InferTypeImpl<Exclude<OptionsT['type'], undefined>>
  | (OptionsT['required'] extends true ? never : null | undefined)

// export type InferDocument<DefT extends mongoose.SchemaDefinition> = {
//   [K in keyof DefT]: DefT[K] extends mongoose.Schema<infer T>
//     ? T
//     : DefT[K] extends mongoose.SchemaType
//     ? unknown
//     : DefT[K] extends mongoose.SchemaTypeOptions<any>
//     ? InferType<DefT[K]>
//     : never
// }

interface QueryOptions {
  sort?: BaseDictionary<number>
  limit?: number
  collation?: { strength: number; locale: string }
}

type FilterQuery<T> = mongoose.FilterQuery<T>
type Model<T> = mongoose.Model<T & mongoose.Document>

export { AutoGeneratedFields, AutoGeneratedFieldsForDeepOmit, Constructor, FilterQuery, InferType, Model, QueryOptions }
